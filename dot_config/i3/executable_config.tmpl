# For the benefit of emacs users: -*- shell-script -*-
#
#  _ _____                    __ _
# (_)___ /    ___ ___  _ __  / _(_) __ _
# | | |_ \   / __/ _ \| '_ \| |_| |/ _` |
# | |___) | | (_| (_) | | | |  _| | (_| |
# |_|____/   \___\___/|_| |_|_| |_|\__, |
#                                  |___/

exec_always --no-startup-id  $HOME/.config/i3/i3-master-stack/i3_master
# swap to master node
bindsym $mod+m nop swap master
# go to master node
bindsym $mod+shift+m nop go master
# enable/disable master layout in current workspace
#bindsym $mod+alt+m nop master toggle


# Make the currently focused window a scratchpad
bindsym $mod+Shift+minus move scratchpad

# Show the first scratchpad window
bindsym $mod+minus scratchpad show

# Default modkey
set $mod Mod4

# Hide titlebar
new_window pixel

# i3-gaps
gaps inner 6

# Font for window titles.
font pango: Fira Code Regular 13

# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod

# Start a terminal
bindsym $mod+Return exec alacritty

# Kill focused window
bindsym $mod+Shift+q kill

# Start rofi
bindsym $mod+d exec rofi -show drun -columns 3

# Move between windows
bindsym $mod+h focus left
bindsym $mod+j focus down
bindsym $mod+k focus up
bindsym $mod+l focus right

# Alternatively, you can use the cursor keys:
bindsym $mod+Left focus left
bindsym $mod+Down focus down
bindsym $mod+Up focus up
bindsym $mod+Right focus right

# Move focused window
bindsym $mod+Shift+j move left
bindsym $mod+Shift+k move down
bindsym $mod+Shift+l move up
bindsym $mod+Shift+semicolon move right

# Alternatively, you can use the cursor keys:
bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
bindsym $mod+Shift+Right move right

# Split in horizontal orientation
bindsym $mod+Shift+h split h

# Split in vertical orientation
bindsym $mod+v split v

# Enter fullscreen mode for the focused container
bindsym $mod+f fullscreen toggle

# Change container layout (stacked, tabbed, toggle split)
bindsym $mod+s layout stacking
bindsym $mod+w layout tabbed
bindsym $mod+e layout toggle split

# Toggle tiling / floating
bindsym $mod+Shift+space floating toggle

# Change focus between tiling / floating windows
bindsym $mod+space focus mode_toggle

# Focus the parent container
bindsym $mod+a focus parent

# Name the workspaces
set $workspace1 " 1:  "
set $workspace2 " 2:  "
set $workspace3 " 3:  "
set $workspace4 " 4:  "
set $workspace5 " 5:  "
set $workspace6 " 6:  "
set $workspace7 " 7:  "
set $workspace8 " 8: ♫ "
set $workspace9 " 9:  "
set $workspace0 " 10:  "


set $laptop {{ .laptop }}
set $external {{ .external }}

{{- if and (ne .laptop "") ( ne .external "")}}
    # Bind the workspaces for monitor external
    workspace $workspace1 output $laptop
    workspace $workspace3 output $laptop
    workspace $workspace5 output $laptop
    workspace $workspace7 output $laptop
    workspace $workspace9 output $laptop

    # Bind the workspaces for monitor laptop
    workspace $workspace2 output $external
    workspace $workspace4 output $external
    workspace $workspace6 output $external
    workspace $workspace8 output $external
    workspace $workspace0 output $external

{{- end }}




# Switch to workspace
bindsym $mod+1 workspace $workspace1
bindsym $mod+2 workspace $workspace2
bindsym $mod+3 workspace $workspace3
bindsym $mod+4 workspace $workspace4
bindsym $mod+5 workspace $workspace5
bindsym $mod+6 workspace $workspace6
bindsym $mod+7 workspace $workspace7
bindsym $mod+8 workspace $workspace8
bindsym $mod+9 workspace $workspace9
bindsym $mod+0 workspace $workspace0

# Move focused container to workspace
bindsym $mod+Shift+1 move container to workspace $workspace1
bindsym $mod+Shift+2 move container to workspace $workspace2
bindsym $mod+Shift+3 move container to workspace $workspace3
bindsym $mod+Shift+4 move container to workspace $workspace4
bindsym $mod+Shift+5 move container to workspace $workspace5
bindsym $mod+Shift+6 move container to workspace $workspace6
bindsym $mod+Shift+7 move container to workspace $workspace7
bindsym $mod+Shift+8 move container to workspace $workspace8
bindsym $mod+Shift+9 move container to workspace $workspace9
bindsym $mod+Shift+0 move container to workspace $workspace0

# Always open some programs on specified workspace
assign [class="firefox"]    $workspace1
assign [class="emacs"]          $workspace2
assign [class="VirtualBox"]     $workspace5
assign [class="cmus"]               $workspace8
assign [class="spotify"]                $workspace8

# You can also use any non-zero value if you'd like to have a border
for_window [class=".*"] border pixel 2

# Enable float for some windows
for_window [class="^Pavucontrol$"] floating enable
for_window [class="^Arandr$"] floating enable
for_window [class="^Steam$" title="^Friends List$"] floating enable
for_window [class="^Steam$" title="Steam - News"] floating enable
for_window [class="^Steam$" title=".* - Chat"] floating enable
for_window [class="^Steam$" title="^Settings$"] floating enable
for_window [class="^Steam$" title=".* - event started"] floating enable
for_window [class="^Steam$" title=".* CD key"] floating enable
for_window [class="^Steam$" title="^Steam - Self Updater$"] floating enable
for_window [class="^Steam$" title="^Screenshot Uploader$"] floating enable
for_window [class="^Steam$" title="^Steam Guard - Computer Authorization Required$"] floating enable
for_window [title="^Steam Keyboard$"] floating enable
for_window [class="Yad"] floating enable

# Reload the configuration file
bindsym $mod+Shift+c reload

# Restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r restart

# Lock screen
bindsym $mod+Shift+x exec ~/.scripts/lock.sh

# Change screen layout
bindsym $mod+Shift+d exec ~/.scripts/menu.sh -m  '([Dual]="~/.scripts/.screenlayout/dual.sh" [External]="~/.scripts/.screenlayout/external.sh" [Laptop]="~/.scripts/.screenlayout/laptop.sh" [Cancel]="")'

# control sound source and toggle sound on and off
bindsym $mod+Shift+s exec ~/.scripts/menu.sh -m  '([Change source]="~/.scripts/sound_control.sh toggle_source" [Toggle sound]="~/.scripts/sound_control.sh toggle_sound" [Cancel]="")'

# Resize window (you can also use the mouse for that)
mode "resize"
{
    # Resize with the arrow keys
    bindsym Left resize shrink width 2 px or 2 ppt
    bindsym Down resize grow height 2 px or 2 ppt
    bindsym Up resize shrink height 2 px or 2 ppt
    bindsym Right resize grow width 2 px or 2 ppt

    # Back to normal: Enter or Escape
    bindsym Return mode "default"
    bindsym Escape mode "default"
}
bindsym $mod+r mode "resize"
bindsym $mod+Shift+e exec "export LOCKSCRIPT='~/.scripts/lock.sh' && ~/.config/i3blocks/blocks/shutdown_menu/shutdown_menu"
# Defining colors
set $bg      #282A36
set $lg      #44475a
set $fg      #f8f8f2
set $cyan    #8be9fd
set $green   #50fa7b
set $magenta #ff79c6
set $comment #6272a4
set $purple  #bd93f9

# Set some nice colors      border       background text     indicator
client.focused              $comment $comment   $fg      $comment
client.unfocused            $bg      $bg        $cyan    $bg
client.focused_inactive     $bg      $bg        $green   $bg
client.urgent               $bg      $bg        $magenta $bg
client.placeholder          $bg      $bg        $cyan    $bg

# Start i3blocks to display a workspace bar
bar
{
    position top
    status_command 2>/tmp/i3blocks.err i3blocks  | tee /tmp/i3blocks.out
    i3bar_command i3bar
    font pango: FontAwesome, Regular 12
    
    {{- if ne .laptop "" }}
    output $laptop
    tray_output primary
    {{- end }}


    colors
    {
#           Border Background Text
            focused_workspace   $fg    $fg        $bg
            active_workspace    $bg    $bg        $purple
            inactive_workspace  $bg    $bg        $cyan
            urgent_workspace    $bg    $bg        $magenta
            background          $bg
    }
}


{{- if ne .external "" }}

# Start i3blocks to display a workspace bar
bar
{
    position top
    status_command 2>/tmp/i3blocks.err i3blocks  | tee /tmp/i3blocks.out
    i3bar_command i3bar
    font pango: FontAwesome, Regular 14
    output $external
    colors
    {
#           Border Background Text
            focused_workspace   $fg    $fg        $bg
            active_workspace    $bg    $bg        $purple
            inactive_workspace  $bg    $bg        $cyan
            urgent_workspace    $bg    $bg        $magenta
            background          $bg
    }
}
{{- end }}


# Startup programs
# exec_always --no-startup-id ~/.scripts/wallpapers.sh
exec --no-startup-id while true; do feh --bg-scale --recursive --randomize ~/quotefancy/* ; sleep 120; done &
exec_always --no-startup-id nm-applet &
exec_always --no-startup-id blueman-applet &
exec --no-startup-id xfce4-power-manager
exec --no-startup-id notify-send "Welcome back waled!" -i ~/.images/icons8-dog-100.png
exec --no-startup-id redshift-gtk
# change volume or toggle mute
bindsym XF86AudioRaiseVolume exec amixer -q -D pulse sset Master 5%+ && pkill -RTMIN+10 i3blocks
bindsym XF86AudioLowerVolume exec amixer -q -D pulse sset Master 5%- && pkill -RTMIN+10 i3blocks
bindsym XF86AudioMute exec amixer -q set Master toggle && pkill -RTMIN+10 i3blocks

bindsym --release Caps_Lock exec pkill -SIGRTMIN+11 i3blocks
bindsym --release Num_Lock  exec pkill -SIGRTMIN+11 i3blocks

exec --no-startup-id "setxkbmap -layout us,ara -option grp:alt_shift_toggle"

# exec_always --no-startup-id exec ~/.scripts/.screenlayout/dual.sh
exec_always --no-startup-id exec xmodmap ~/.Xmodmap

exec_always --no-startup-id "sh -c 'sleep 1; exec  picom --config ~/.config/picom/picom.conf  --xrender-sync-fence'"

exec_always --no-startup-id exec clipmenud
bindsym $mod+Shift+v exec clipmenu
#bindsym Print exec scrot $HOME/Images/`date +%Y-%m-%d_%H:%M:%S`.png

# Screenshots
#bindsym  --release Print exec maim /home/$USER/Pictures/$(date)
#bindsym  --release $mod + Print exec  maim --window $(xdotool getactivewindow) "/home/$USER/Pictures/$(date)"
#bindsym  --release Shift + Print exec  maim --select "/home/$USER/Pictures/$(date)"


bindsym --release Print exec --no-startup-id maim "/home/$USER/Pictures/$(date).png"
bindsym --release Shift+Print exec --no-startup-id maim --window $(xdotool getactivewindow) "/home/$USER/Pictures/$(date).p>
bindsym --release $mod+Shift+Print  exec --no-startup-id maim --select "/home/$USER/Pictures/$(date).png"